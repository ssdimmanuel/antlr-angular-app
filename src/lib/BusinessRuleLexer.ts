// Generated from ./src/antlr/BusinessRule.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class BusinessRuleLexer extends Lexer {
	public static readonly TRUE = 1;
	public static readonly FALSE = 2;
	public static readonly STRING = 3;
	public static readonly LEFTPAREN = 4;
	public static readonly RIGHTPAREN = 5;
	public static readonly EQUAL = 6;
	public static readonly LT = 7;
	public static readonly GT = 8;
	public static readonly LTE = 9;
	public static readonly GTE = 10;
	public static readonly NE = 11;
	public static readonly AND = 12;
	public static readonly OR = 13;
	public static readonly VARIABLE = 14;
	public static readonly NUMBER = 15;
	public static readonly SPACE = 16;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"TRUE", "FALSE", "STRING", "LEFTPAREN", "RIGHTPAREN", "EQUAL", "LT", "GT", 
		"LTE", "GTE", "NE", "AND", "OR", "VARIABLE", "NUMBER", "SPACE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "'('", "')'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "TRUE", "FALSE", "STRING", "LEFTPAREN", "RIGHTPAREN", "EQUAL", 
		"LT", "GT", "LTE", "GTE", "NE", "AND", "OR", "VARIABLE", "NUMBER", "SPACE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(BusinessRuleLexer._LITERAL_NAMES, BusinessRuleLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return BusinessRuleLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(BusinessRuleLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "BusinessRule.g4"; }

	// @Override
	public get ruleNames(): string[] { return BusinessRuleLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return BusinessRuleLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return BusinessRuleLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return BusinessRuleLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x12\x93\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x05\x02,\n\x02\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x05\x038\n\x03\x03\x04\x03\x04\x07\x04<\n\x04\f\x04\x0E\x04?\v\x04" +
		"\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07" +
		"\x05\x07J\n\x07\x03\b\x03\b\x03\b\x05\bO\n\b\x03\t\x03\t\x03\t\x05\tT" +
		"\n\t\x03\n\x03\n\x03\n\x03\n\x05\nZ\n\n\x03\v\x03\v\x03\v\x03\v\x05\v" +
		"`\n\v\x03\f\x03\f\x03\f\x03\f\x05\ff\n\f\x03\r\x03\r\x03\r\x03\r\x03\r" +
		"\x03\r\x03\r\x05\ro\n\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E" +
		"v\n\x0E\x03\x0F\x06\x0Fy\n\x0F\r\x0F\x0E\x0Fz\x03\x0F\x07\x0F~\n\x0F\f" +
		"\x0F\x0E\x0F\x81\v\x0F\x03\x10\x06\x10\x84\n\x10\r\x10\x0E\x10\x85\x03" +
		"\x10\x03\x10\x06\x10\x8A\n\x10\r\x10\x0E\x10\x8B\x05\x10\x8E\n\x10\x03" +
		"\x11\x03\x11\x03\x11\x03\x11\x02\x02\x02\x12\x03\x02\x03\x05\x02\x04\x07" +
		"\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15" +
		"\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02" +
		"\x12\x03\x02\x07\x05\x02\v\f\x0F\x0F$$\x04\x02C\\c|\x07\x02/02;C\\aac" +
		"|\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x02\xA4\x02\x03\x03\x02\x02\x02\x02" +
		"\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02" +
		"\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11" +
		"\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17" +
		"\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D" +
		"\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x03+\x03" +
		"\x02\x02\x02\x057\x03\x02\x02\x02\x079\x03\x02\x02\x02\tB\x03\x02\x02" +
		"\x02\vD\x03\x02\x02\x02\rI\x03\x02\x02\x02\x0FN\x03\x02\x02\x02\x11S\x03" +
		"\x02\x02\x02\x13Y\x03\x02\x02\x02\x15_\x03\x02\x02\x02\x17e\x03\x02\x02" +
		"\x02\x19n\x03\x02\x02\x02\x1Bu\x03\x02\x02\x02\x1Dx\x03\x02\x02\x02\x1F" +
		"\x83\x03\x02\x02\x02!\x8F\x03\x02\x02\x02#$\x07v\x02\x02$%\x07t\x02\x02" +
		"%&\x07w\x02\x02&,\x07g\x02\x02\'(\x07V\x02\x02()\x07T\x02\x02)*\x07W\x02" +
		"\x02*,\x07G\x02\x02+#\x03\x02\x02\x02+\'\x03\x02\x02\x02,\x04\x03\x02" +
		"\x02\x02-.\x07h\x02\x02./\x07c\x02\x02/0\x07n\x02\x0201\x07u\x02\x021" +
		"8\x07g\x02\x0223\x07H\x02\x0234\x07C\x02\x0245\x07N\x02\x0256\x07U\x02" +
		"\x0268\x07G\x02\x027-\x03\x02\x02\x0272\x03\x02\x02\x028\x06\x03\x02\x02" +
		"\x029=\x07$\x02\x02:<\n\x02\x02\x02;:\x03\x02\x02\x02<?\x03\x02\x02\x02" +
		"=;\x03\x02\x02\x02=>\x03\x02\x02\x02>@\x03\x02\x02\x02?=\x03\x02\x02\x02" +
		"@A\x07$\x02\x02A\b\x03\x02\x02\x02BC\x07*\x02\x02C\n\x03\x02\x02\x02D" +
		"E\x07+\x02\x02E\f\x03\x02\x02\x02FJ\x07?\x02\x02GH\x07G\x02\x02HJ\x07" +
		"S\x02\x02IF\x03\x02\x02\x02IG\x03\x02\x02\x02J\x0E\x03\x02\x02\x02KO\x07" +
		">\x02\x02LM\x07N\x02\x02MO\x07V\x02\x02NK\x03\x02\x02\x02NL\x03\x02\x02" +
		"\x02O\x10\x03\x02\x02\x02PT\x07@\x02\x02QR\x07I\x02\x02RT\x07V\x02\x02" +
		"SP\x03\x02\x02\x02SQ\x03\x02\x02\x02T\x12\x03\x02\x02\x02UV\x07>\x02\x02" +
		"VZ\x07?\x02\x02WX\x07N\x02\x02XZ\x07G\x02\x02YU\x03\x02\x02\x02YW\x03" +
		"\x02\x02\x02Z\x14\x03\x02\x02\x02[\\\x07@\x02\x02\\`\x07?\x02\x02]^\x07" +
		"I\x02\x02^`\x07G\x02\x02_[\x03\x02\x02\x02_]\x03\x02\x02\x02`\x16\x03" +
		"\x02\x02\x02ab\x07#\x02\x02bf\x07?\x02\x02cd\x07P\x02\x02df\x07G\x02\x02" +
		"ea\x03\x02\x02\x02ec\x03\x02\x02\x02f\x18\x03\x02\x02\x02gh\x07C\x02\x02" +
		"hi\x07P\x02\x02io\x07F\x02\x02jo\x07(\x02\x02kl\x07c\x02\x02lm\x07p\x02" +
		"\x02mo\x07f\x02\x02ng\x03\x02\x02\x02nj\x03\x02\x02\x02nk\x03\x02\x02" +
		"\x02o\x1A\x03\x02\x02\x02pq\x07Q\x02\x02qv\x07T\x02\x02rs\x07q\x02\x02" +
		"sv\x07t\x02\x02tv\x07~\x02\x02up\x03\x02\x02\x02ur\x03\x02\x02\x02ut\x03" +
		"\x02\x02\x02v\x1C\x03\x02\x02\x02wy\t\x03\x02\x02xw\x03\x02\x02\x02yz" +
		"\x03\x02\x02\x02zx\x03\x02\x02\x02z{\x03\x02\x02\x02{\x7F\x03\x02\x02" +
		"\x02|~\t\x04\x02\x02}|\x03\x02\x02\x02~\x81\x03\x02\x02\x02\x7F}\x03\x02" +
		"\x02\x02\x7F\x80\x03\x02\x02\x02\x80\x1E\x03\x02\x02\x02\x81\x7F\x03\x02" +
		"\x02\x02\x82\x84\t\x05\x02\x02\x83\x82\x03\x02\x02\x02\x84\x85\x03\x02" +
		"\x02\x02\x85\x83\x03\x02\x02\x02\x85\x86\x03\x02\x02\x02\x86\x8D\x03\x02" +
		"\x02\x02\x87\x89\x070\x02\x02\x88\x8A\t\x05\x02\x02\x89\x88\x03\x02\x02" +
		"\x02\x8A\x8B\x03\x02\x02\x02\x8B\x89\x03\x02\x02\x02\x8B\x8C\x03\x02\x02" +
		"\x02\x8C\x8E\x03\x02\x02\x02\x8D\x87\x03\x02\x02\x02\x8D\x8E\x03\x02\x02" +
		"\x02\x8E \x03\x02\x02\x02\x8F\x90\t\x06\x02\x02\x90\x91\x03\x02\x02\x02" +
		"\x91\x92\b\x11\x02\x02\x92\"\x03\x02\x02\x02\x13\x02+7=INSY_enuz\x7F\x85" +
		"\x8B\x8D\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!BusinessRuleLexer.__ATN) {
			BusinessRuleLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(BusinessRuleLexer._serializedATN));
		}

		return BusinessRuleLexer.__ATN;
	}

}

